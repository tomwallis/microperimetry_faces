function thefilter=ofilter(oLow,oHigh,dim);%% function thefilter=bpfilter(lowf,highf,dim);% Constructs a 2D ideal, bandpass ORIENTATION filter.% Only orientations between oLow and oHigh are passed by the filter.% horizontal = 0 deg; vertical = 90 deg% % SEE BPIMAGE for an example of how thefilter can be used to filter an image.%% AUG 19 2003 - changed algorithm substantially; now uses meshgrid; fixed numerous bugs - PJBif (nargin<3)	disp('ERROR IN ofilter: 3 input parameters are required.');	thefilter=NaN;	return;end;if (dim<1)	disp('ERROR IN ofilter: dimension must be greater than zero.');	thefilter=NaN;	return;end;if (isempty(oLow)|isnan(oLow)|isempty(oHigh)|isnan(oHigh))	thefilter=ones(dim,dim);	return;end;% % shift orientations so that 0 is horizontal and 90 is vertical% oLow=oLow-90;% oHigh=oHigh-90;if (oLow>oHigh)	otemp=oLow;	oLow=oHigh;	oHigh=otemp;end;% handle common special case quicklyif oHigh-oLow==180	thefilter=ones(dim,dim);	return;end% call to meshgrid based on FREQSPACE.mt1 = ((0:dim-1)-floor(dim/2))*(2/(dim));[t1,t2] = meshgrid(t1,t1);a=atan2(t1,t2)*180/pi; % direction, -180 to 180 deg.t1=t1.*t1+t2.*t2; % radial frequency squaredclear t2a=mod(a,180); % orientation, 0 to 180 deg.oLow=mod(oLow,180);oHigh=mod(oHigh,180);thefilter=ones(size(t1));						% start with all-pass filterif oHigh>=oLow	d=find((a<oLow | a>=oHigh) & t1>0); % find out-of-band frequencieselse	d=find((a<oLow & a>=oHigh) & t1>0); % find out-of-band frequenciesendif ~isempty(d)	thefilter(d)=zeros(size(d));				% zero the gain at those frequenciesend