function outimage=bpimage(inimage,thefilter,showImage);%% function outimage=bpimage(inimage,thefilter,showImage)% bandpass filters matrix "inimage" and returns it as "outimage"% parameters:%		>> inimage: input image; must be a square matrix%		>> thefilter: bandpass amplitude filter; the amplitude spectrum of inimage is%		   multiplied by thefilter%		   N.B. inimage and thefilter must both be square and the same size%		>> showImage: if showImage is 1, the input, output, and filter will be%		   displayed in separate Matlab windows; default is zero (i.e, not shown)%if (nargin<3)	showImage=0;end;if (nargin<2)	disp('ERROR in BPIMAGE: need at least 2 input parameters');	outimage=[NaN];	return;end;dim1=size(inimage,1);dim2=size(inimage,2);if (dim1 ~= dim2)	disp('ERROR in BPIMAGE: inimage must be a square matrix');	outimage=NaN;	return;end;dim3=size(thefilter,1);dim4=size(thefilter,2);if (dim3 ~= dim4)	disp('ERROR in BPIMAGE: thefilter must be a square matrix');	outimage=NaN;	return;end;if (dim1 ~= dim3)	disp('ERROR in BPIMAGE: inimage & thefilter must the same size');	outimage=NaN;	return;end;ft=fftshift(fft2(inimage));amp=abs(ft);phase=angle(ft);r=size(amp,1);c=size(amp,2);dc=[round(r/2)+1,round(c/2)+1];dcAmp=amp(dc(1),dc(2));% thefilter=bpfilter(lowf,highf,dim);% temp=ofilter(orient1,orient2,dim);% thefilter=thefilter.*temp;amp = amp.*thefilter;ft = amp.*exp(sqrt(-1)*phase);outimage=real(ifft2(fftshift(ft)));if (showImage ~= 0)	figure(1);imshow(scale(thefilter));set(1,'Name','filter')	figure(2);imshow(scale(inimage));set(2,'Name','input')	figure(3);imshow(scale(outimage));set(3,'Name','output')end;return;